// Output a number in the $base-unit.
//
// @param number $number
//   The number (without unit) to output.
//
// @return number
//   The number with the base unit
@function typey-output-in-base-unit($number) {
  @if $number == 0 {
    @return 0;
  }
  @if $base-unit == rem {
    @return $number * 1rem;
  }
  @if $base-unit == px {
    @return $number * 1px;
  }
  @if $base-unit == em {
    @return $number * 1em;
  }
}

// Output a number in a chosen unit.
//
// @param number $number
//   The number (without unit) to output.
// @param string $unit
//   (optional) The unit to output, either em, px or rem.
//
// @return number
//   The number with the base unit
@function typey-output-in-unit($number, $unit: $base-unit) {
  @if $number == 0 {
    @return 0;
  }
  @if $unit == rem {
    @return $number * 1rem;
  }
  @if $unit == px {
    @return $number * 1px;
  }
  @if $unit == em {
    @return $number * 1em;
  }
}

// Remove the unit from a number.
//
// @param number $number
//   The number (with unit) to convert. Allowed units: any
//
// @return number
//   The number without the unit.
@function typey-strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// Calculate relative sizing for em when a px value is used.
//
// @param number $number
//   The px value
// @param number|string $context
//   The relative value to perform the calculation.
//
// @return number
//   The calculated value in the base unit.
@function calculate-em-px($x, $context) {
  $allowed-types: "font-size", "px";
  $type: typey-validator($context, $allowed-types);
  @if $type == "font-size" {
    $context-map-size: map-get($font-size, $context);
    @return typey-output-in-unit(($x / $context-map-size), em);
  }
  @if $type == "px" {
    @return typey-output-in-unit(($x / $context), em);
  }
}

// Calculate relative sizing for em when a multiplier is used.
//
// @param number $number
//   Multiple of line height to be used.
// @param number|string $context
//   The relative value to perform the calculation.
//
// @return number
//   The calculated value in the base unit.
@function calculate-em-multiplier($x, $context) {
  $allowed-types: "font-size", "px";
  $type: typey-validator($context, $allowed-types);
  @if $type == "font-size" {
    $context-map-size: map-get($font-size, $context);
    @return typey-output-in-unit(($x * $base-line-height) / $context-map-size, em);
  }
  @if $type == "px" {
    @return typey-output-in-unit(($x * $base-line-height) / $context, em);
  }
}

// Append pseudo-classes to a selector(s).
//
// @argument {list | string} $inputs
//   A selector, or list of selectors, to apply the pseudo-class to.
//
// @argument {pseudo-class} $pseudo [null]
//   The pseudo-class to be appended.
//
// @return {list}
//
// @access private
@function assign-inputs($inputs, $pseudo: null) {
  $list: ();
  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }
  @return $list;
}