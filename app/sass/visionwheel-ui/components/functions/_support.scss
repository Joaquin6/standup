// Check if the browser is in scope given the browser support and current prefix minimums.
@function browser-out-of-scope($browser, $version: null) {
  @if not index($supported-browsers, $browser) {
    @if $debug-browser-support {
      @return "#{$browser} is not listed as a supported browser."
    } @else {
      @return true;
    }
  } @else if not ($current-prefix == null or $current-prefix == browser-prefix($browser)) {
    @if $debug-browser-support {
      @return "#{$browser} #{$version} is incompatible with #{$current-prefix}."
    } @else {
      @return true;
    }
  }
  $current-range: map-get($current-browser-versions, $browser);
  $current-min: if($current-range, nth($current-range, 1), null);
  $current-max: if($current-range, nth($current-range, 2), null);
  @if not ($version and $current-max) {
    // We don't have any versions to compare
    @return false;
  } @else {
    // If the version is less than the current min, it is not supported
    $too-old: compare-browser-versions($browser, $version, $current-min) < 0;
    $too-new: compare-browser-versions($browser, $version, $current-max) > 0;
    @if $too-old or $too-new {
      @if $debug-browser-support {
        @return "The current scope only works with #{display-browser-range($browser, $current-min, $current-max)}.";
      } @else {
        @return true;
      }
    } @else {
      @return false;
    }
  }
}

// Check whether the browser is supported according to the supported browsers,
// declared minimum support and usage thresholds.
@function support-legacy-browser($browser, $min-version, $max-version: null, $threshold: $critical-usage-threshold) {
  @if not index($supported-browsers, $browser) {
    @return false;
  }
  // Check agaist usage stats and declared minimums
  $min-required-version: map-get($browser-minimum-versions, $browser);
  $usage: if($max-version, omitted-usage($browser, $min-version, $max-version), omitted-usage($browser, $min-version));
  @return $usage > $threshold or ($min-required-version and compare-browser-versions($browser, $max-version or $min-version, $min-required-version) >= 0);
}

@function display-browser-range($browser, $min-version, $max-version: $min-version) {
  @return "#{unquote($browser)} #{unquote($min-version)}#{if($max-version != $min-version, unquote(' -') unquote($max-version), null)}";
}

@function prefixes-for-capability($capability, $threshold, $capability-options: $default-capability-options) {
  $result: ();
  @each $prefix in browser-prefixes($supported-browsers) {
    $result: map-merge($result, ($prefix: use-prefix($prefix, $capability, $threshold, $capability-options)));
  }
  @return $result;
}

// The prefixes used by the given browsers.
@function browser-prefixes($browsers) {
  $prefixes: ();
  @each $browser in $browsers {
    $prefix: map-get($browsers, $browser);
    $prefixes: append($prefixes, $prefix, comma);
  }
  @return $prefixes;
}

// Returns true if the prefixed usage stats for the capability exceed the threshold
// or if the minimum version for a supported browser would require a prefix for the capability.
@function use-prefix($prefix, $capability, $threshold, $capability-options: $default-capability-options) {
  $usage: prefix-usage($prefix, $capability, $capability-options);
  @if $usage > $threshold {
    @return $usage;
  } @else {
    @each $browser in browsers-with-prefix($prefix) {
      @if index($supported-browsers, $browser) {
        $min-version: map-get($browser-minimum-versions, $browser);
        @if $min-version {
          $actual-prefix: browser-requires-prefix($browser, $min-version, $capability, $capability-options);
          @if $actual-prefix and $prefix == $actual-prefix {
            @return $browser $min-version;
          }
        }
      }
    }
  }
  @return false;
}

// returns the percentage of users (0-100) that would be affected if the prefix
// was not used with the given capability.
@function prefix-usage($prefix, $capability, $capability-options) {
  $usage: 0;
  @each $browser in browsers-with-prefix($prefix) {
    // this is a hardcoaded value! Will change soon!
    $usage: 90;
  }
  @return $usage;
}

// returns the list of browsers that use the given prefix
@function browsers-with-prefix($prefix) {
  $browsers-w-prefix: ();
  @each $browser in $supported-browsers {
    $matching-prefix: map-get($supported-browsers, $browser);
    @if $matching-prefix == $prefix {
      $browsers-w-prefix: append($browsers-w-prefix, $browser, comma);
    }
  }
  @return $browsers-w-prefix;
}

// returns all possible prefixes a browser might use.
@function all-prefixes($browser) {}

@function prefix-identifier($ident, $prefix: $current-prefix) {
  @return unquote("#{$prefix}#{if($prefix, '-', null)}#{$ident}");
}

// @private
@function warn-about-old-variables() {
  $old-variables-in-use: ();
  @each $old-variable-name in (legacy-support-for-ie, legacy-support-for-ie6, legacy-support-for-ie7, legacy-support-for-ie8, legacy-support-for-mozilla, legacy-support-for-webkit, experimental-support-for-mozilla, experimental-support-for-webkit, experimental-support-for-opera, experimental-support-for-microsoft, experimental-support-for-khtml, experimental-support-for-svg) {
    @if global-variable-exists($old-variable-name) {
      $old-variables-in-use: append($old-variables-in-use, unquote("$#{$old-variable-name}"), comma);
    }
  }
  @if length($old-variables-in-use) > 0 {
    @warn "Application has changed how browser support is configured. " +
          "The following configuration variables " +
          "are no longer supported: #{$old-variables-in-use}."
  }
  @return $old-variables-in-use;
}

// @private
@function warn-about-pie-removal() {
  @if global-variable-exists(experimental-support-for-pie) {
    @warn "Application no longer supports css3pie.";
  }
  @return true;
}

// Set a default value if the given arglist is empty
@function set-arglist-default($arglist, $default) {
  $default-index: index($arglist, default);
  @if $default-index {
    $arglist: set-nth($arglist, $default-index, $default)
  }
  @return if(length($arglist) > 0, $arglist, $default);
}

// @private
@function warn-about-useless-prefix-arguments($moz: null, $webkit: null, $o: null, $khtml: null, $official: null) {
  @if $moz != null or $webkit != null or $o != null or $khtml != null or $official != null {
    @warn "Browser prefix arguments to this mixin are no longer used and " +
          "will be removed in the next release.";
  }
  @return true;
}

// coerce a list to be comma delimited or make a new, empty comma delimited list.
@function comma-list($list: ()) {
  @return join((), $list, comma);
}

// @private Returns the legacy value for a given box-model
// - Used by background-clip and -origin.
@function legacy-box($box) {
  $box: unquote($box);
  @if $box == padding-box { $box: padding; }
  @if $box == border-box { $box: border; }
  @if $box == content-box { $box: content; }
  @return $box;
}

// support-for()
//
// Determines if the project has declared a minimum supported version number for
// the specified browser.
//
// If configured, this is a wrapper function that uses Compass'
// support-legacy-browser().
// @see http://compass-style.org/reference/compass/support/#function-support-legacy-browser
//
@function support-for($browser, $version) {
  // Ensure $version is an integer (or null).
  @if not (type-of($version) == "null" or type-of($version) == "number" and round($version) == $version) {
    @error "The $version parameter of support-for() must be an integer; #{type-of($version)} given.";
  }

  // Check against declared minimums.
  $min-version: null;
  @if map-has-key($support-for, $browser) {
    $min-version: map-get($support-for, $browser);
  }
  @else if map-has-key($support-for, '*') {
    $min-version: map-get($support-for, '*');
  }

  // Ensure $min-version is an integer (or null).
  @if type-of($min-version) != "null" and type-of($min-version) != "number" {
    @error "$support-for: (#{$browser}: #{$min-version}) must be set to an integer (or null); #{$min-version} is a #{type-of($min-version)}.";
  }
  @elseif type-of($min-version) == "number" and round($min-version) != $min-version {
    @error "$support-for: (#{$browser}: #{$min-version}) must be set to an integer (or null); #{$min-version} is not an integer.";
  }

  // Negative $min-version means "X most recent versions".
  @if type-of($min-version) == "number" and $min-version < 0 {
    @if not map-has-key($support-for-current-browser-version, $browser) {
      @error "#{$browser} not found in $support-for-current-browser-version map; it must be set to an integer.";
    }
    $min-version: map-get($support-for-current-browser-version, $browser) + $min-version + 1;
  }

  @return if(($min-version and ($version >= $min-version)), true, false);
}